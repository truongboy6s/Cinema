import React, { createContext, useContext, useState, useEffect } from 'react';
import { showtimeAPI } from '../services/apiServices';

const ShowtimeContext = createContext();

export const useShowtimes = () => {
  const context = useContext(ShowtimeContext);
  if (!context) {
    throw new Error('useShowtimes must be used within a ShowtimeProvider');
  }
  return context;
};

export const ShowtimeProvider = ({ children }) => {
  const [showtimes, setShowtimes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch showtimes from API
  const fetchShowtimes = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await showtimeAPI.getAll();
      setShowtimes(response.data || []);
    } catch (error) {
      setError(error.response?.data?.message || 'L·ªói khi t·∫£i danh s√°ch l·ªãch chi·∫øu');
      console.error('Error fetching showtimes:', error);
    } finally {
      setLoading(false);
    }
  };

  // Load showtimes on component mount
  useEffect(() => {
    fetchShowtimes();
  }, []);

  const addShowtime = async (showtimeData) => {
    try {
      setLoading(true);
      setError(null);
      const response = await showtimeAPI.create(showtimeData);
      const newShowtime = response.data;
      setShowtimes(prevShowtimes => [...prevShowtimes, newShowtime]);
      return newShowtime;
    } catch (error) {
      const errorData = error.response?.data;
      let errorMessage = errorData?.message || 'L·ªói khi t·∫°o l·ªãch chi·∫øu';
      
      // If there's conflict information, format it nicely
      if (errorData?.conflict) {
        errorMessage = `‚ùå Khung gi·ªù b·ªã tr√πng!\n\n` +
          `üé¨ Phim ƒëang chi·∫øu: "${errorData.conflict.movieTitle}"\n` +
          `‚è∞ Th·ªùi gian: ${errorData.conflict.time}\n` +
          `‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${errorData.conflict.duration} ph√∫t\n\n` +
          `üí° Vui l√≤ng ch·ªçn khung gi·ªù kh√°c ho·∫∑c s·ª≠ d·ª•ng t√≠nh nƒÉng "Ch·ªçn khung gi·ªù" ƒë·ªÉ xem c√°c slot kh·∫£ d·ª•ng.`;
      }
      
      setError(errorMessage);
      console.error('Error creating showtime:', error);
      
      // Return the error with conflict info for frontend handling
      const customError = new Error(errorMessage);
      customError.conflict = errorData?.conflict;
      throw customError;
    } finally {
      setLoading(false);
    }
  };

  const updateShowtime = async (showtimeId, updatedData) => {
    try {
      setLoading(true);
      setError(null);
      const response = await showtimeAPI.update(showtimeId, updatedData);
      const updatedShowtime = response.data;
      setShowtimes(prevShowtimes =>
        prevShowtimes.map(showtime =>
          showtime._id === showtimeId || showtime.id === showtimeId
            ? updatedShowtime
            : showtime
        )
      );
      return updatedShowtime;
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t l·ªãch chi·∫øu';
      setError(errorMessage);
      console.error('Error updating showtime:', error);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const deleteShowtime = async (showtimeId) => {
    try {
      setLoading(true);
      setError(null);
      await showtimeAPI.delete(showtimeId);
      setShowtimes(prevShowtimes => 
        prevShowtimes.filter(showtime => 
          showtime._id !== showtimeId && showtime.id !== showtimeId
        )
      );
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'L·ªói khi x√≥a l·ªãch chi·∫øu';
      setError(errorMessage);
      console.error('Error deleting showtime:', error);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const getShowtimesByMovie = (movieId) => {
    return showtimes.filter(showtime => showtime.movieId === parseInt(movieId));
  };

  const getShowtimesByTheater = (theaterId) => {
    return showtimes.filter(showtime => showtime.theaterId === parseInt(theaterId));
  };

  const getShowtimesByDate = (date) => {
    return showtimes.filter(showtime => showtime.date === date);
  };

  const bookSeats = (showtimeId, numberOfSeats) => {
    setShowtimes(prevShowtimes =>
      prevShowtimes.map(showtime =>
        showtime.id === showtimeId
          ? { 
              ...showtime, 
              availableSeats: Math.max(0, showtime.availableSeats - numberOfSeats)
            }
          : showtime
      )
    );
  };

  // Get available time slots
  const getAvailableTimeSlots = async (theaterId, roomId, date, movieId) => {
    try {
      setLoading(true);
      setError(null);
      const response = await showtimeAPI.getAvailableTimeSlots(theaterId, roomId, date, movieId);
      return response.data;
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'L·ªói khi l·∫•y khung gi·ªù kh·∫£ d·ª•ng';
      setError(errorMessage);
      console.error('Error getting available time slots:', error);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Copy showtimes
  const copyShowtimes = async (fromDate, toDate, theaterId, roomId = null) => {
    try {
      setLoading(true);
      setError(null);
      const response = await showtimeAPI.copyShowtimes(fromDate, toDate, theaterId, roomId);
      // Refresh showtimes after copy
      await fetchShowtimes();
      return response.data;
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'L·ªói khi sao ch√©p l·ªãch chi·∫øu';
      setError(errorMessage);
      console.error('Error copying showtimes:', error);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const value = {
    showtimes,
    loading,
    error,
    addShowtime,
    updateShowtime,
    deleteShowtime,
    getShowtimesByMovie,
    getShowtimesByTheater,
    getShowtimesByDate,
    bookSeats,
    setShowtimes,
    fetchShowtimes,
    getAvailableTimeSlots,
    copyShowtimes,
    setError
  };

  return (
    <ShowtimeContext.Provider value={value}>
      {children}
    </ShowtimeContext.Provider>
  );
};

export default ShowtimeContext;