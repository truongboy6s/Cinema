import React, { createContext, useState, useContext, useEffect } from 'react';
import toast from 'react-hot-toast';
import { apiClient } from '../services/api';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p t·ª´ localStorage v√† verify token
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        // Ki·ªÉm tra n·∫øu ƒëang ·ªü trang admin th√¨ kh√¥ng check user auth
        if (window.location.pathname.startsWith('/admin')) {
          console.log('üö´ Admin page detected, skipping user auth check');
          setLoading(false);
          return;
        }

        const storedUser = localStorage.getItem('cinema_user');
        const storedToken = localStorage.getItem('cinema_user_token');
        
        if (storedUser && storedToken) {
          // Verify token b·∫±ng c√°ch g·ªçi API profile
          try {
            const response = await apiClient.get('/auth/profile');
            if (response.success) {
              // Set user b·∫•t k·ªÉ role - user c√≥ th·ªÉ v·ª´a l√† user v·ª´a l√† admin
              setUser(response.data.user);
              console.log('‚úÖ User token h·ª£p l·ªá, user ƒë√£ ƒëƒÉng nh·∫≠p:', response.data.user.email, 'Role:', response.data.user.role);
            } else {
              // Token kh√¥ng h·ª£p l·ªá, x√≥a storage
              console.log('‚ùå Token kh√¥ng h·ª£p l·ªá, ƒëang x√≥a storage');
              localStorage.removeItem('cinema_user');
              localStorage.removeItem('cinema_user_token');
              setUser(null);
            }
          } catch (error) {
            // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
            console.error('‚ùå L·ªói verify token:', error.message);
            localStorage.removeItem('cinema_user');
            localStorage.removeItem('cinema_user_token');
            setUser(null);
          }
        } else {
          console.log('üìù Kh√¥ng c√≥ user ho·∫∑c token trong localStorage');
        }
      } catch (error) {
        console.error('‚ùå L·ªói check auth status:', error);
        localStorage.removeItem('cinema_user');
        localStorage.removeItem('cinema_user_token');
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkAuthStatus();
  }, []);



  const login = async (email, password) => {
    try {
      setLoading(true);
      console.log('üîê ƒêang ƒëƒÉng nh·∫≠p v·ªõi email:', email);
      
      const response = await apiClient.post('/auth/login', {
        email,
        password
      });

      if (response.success) {
        const { user, token } = response.data;
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', user.email);
        console.log('üîë Token nh·∫≠n ƒë∆∞·ª£c:', token ? 'Yes' : 'No');
        
        // L∆∞u user v√† token v√†o localStorage (kh√¥ng clear admin tokens)
        setUser(user);
        localStorage.setItem('cinema_user', JSON.stringify(user));
        localStorage.setItem('cinema_user_token', token);
        
        toast.success('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
        return { success: true };
      } else {
        console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', response.message);
        toast.error(response.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
      const errorMessage = error.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p!';
      toast.error(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData) => {
    try {
      setLoading(true);
      console.log('üìù ƒêang ƒëƒÉng k√Ω user:', userData.email);
      
      const response = await apiClient.post('/auth/register', {
        fullName: userData.name,
        email: userData.email,
        password: userData.password,
        phone: userData.phone || ''
      });

      if (response.success) {
        const { user, token } = response.data;
        console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', user.email);
        
        // L∆∞u user v√† token v√†o localStorage
        setUser(user);
        localStorage.setItem('cinema_user', JSON.stringify(user));
        localStorage.setItem('cinema_user_token', token);
        
        toast.success('ƒêƒÉng k√Ω th√†nh c√¥ng!');
        return { success: true };
      } else {
        console.log('‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i:', response.message);
        toast.error(response.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i!');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error);
      const errorMessage = error.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω!';
      toast.error(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      // G·ªçi API logout n·∫øu c√≥ token
      const token = localStorage.getItem('cinema_user_token');
      if (token) {
        try {
          await apiClient.post('/auth/logout');
          console.log('‚úÖ ƒêƒÉng xu·∫•t API th√†nh c√¥ng');
        } catch (error) {
          console.error('‚ùå L·ªói logout API:', error);
          // V·∫´n ti·∫øp t·ª•c logout local d√π API l·ªói
        }
      }
    } catch (error) {
      console.error('‚ùå L·ªói logout:', error);
    } finally {
      // X√≥a state local b·∫•t k·ªÉ API response
      setUser(null);
      localStorage.removeItem('cinema_user');
      localStorage.removeItem('cinema_user_token');
      console.log('üîì ƒê√£ x√≥a user v√† token kh·ªèi localStorage');
      toast.success('ƒêƒÉng xu·∫•t th√†nh c√¥ng!');
    }
  };

  // Update user profile
  const updateProfile = async (profileData) => {
    try {
      if (!user) throw new Error('User not authenticated');

      const response = await apiClient.put('/auth/profile', profileData);
      
      if (response.success) {
        const updatedUser = response.data.user;
        setUser(updatedUser);
        localStorage.setItem('cinema_user', JSON.stringify(updatedUser));
        
        toast.success('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
        return { success: true };
      } else {
        toast.error(response.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i!');
        return { success: false, error: response.message };
      }
    } catch (error) {
      const errorMessage = error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin!';
      toast.error(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  // Change password
  const changePassword = async (currentPassword, newPassword) => {
    try {
      if (!user) throw new Error('User not authenticated');

      const response = await apiClient.put('/auth/change-password', {
        currentPassword,
        newPassword
      });

      if (response.success) {
        toast.success('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
        return { success: true };
      } else {
        toast.error(response.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!');
        return { success: false, error: response.message };
      }
    } catch (error) {
      const errorMessage = error.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u!';
      toast.error(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const value = {
    user,
    login,
    register,
    logout,
    updateProfile,
    changePassword,
    loading,
    isAuthenticated: !!user
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
